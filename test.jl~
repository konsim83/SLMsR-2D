include("reload.jl");

m = Mesh.mesh_unit_square(2);
r = FEM.RefEl_Pk{1}();
d = FEM.Dof_Pk_periodic_square{r.n_order}(m);
p = Problem.Gaussian(1.0);
q = Quad.Quad_simplex(3);


# ===============================================

function modify_ansatzfunction_v(v :: Array{Float64,2}, DF :: Array{Float64,3}, Phi :: Array{Float64,3})

    Phi_mod = Array{Float64,2}(size(Phi,1), size(Phi,2))

    for i=1:size(Phi,1)
        Phi_mod[i,:] = Phi[i,:,:] * DF[i,:,:] * v[i,:]
    end
    
    return Phi_mod
end

# ===============================================


# ----------------
i = FEM.get_dof_elem(d, m, 1:d.n_elem)
ind_test = vec(transpose(repmat(i, 1, size(i,2))))
ind = vec(i[:,[1 ; 1 ; 1 ; 2 ; 2 ; 2 ; 3 ; 3 ; 3]]')



n = r.n_node
mat_local = zeros(n, n, m.n_cell)
    
x = Mesh.map_ref_point(m, q.point, 1:d.n_elem);
diff = Problem.diffusion(p, 1.0, x)


Phi = FEM.eval_grad(r, q.point);
Phi_test = FEM.eval_grad(r, q.point);

DF = Mesh.map_ref_point_grad_inv(m, q.point, 1:d.n_elem);
weight_elem = Mesh.map_ref_point_grad_det(m, q.point, 1:d.n_elem)

for k = 1:1#mesh.n_elem    
    mat_local[:,:,k] = Phi_test' * diagm(q.weight) * diagm(weight_elem[:,k]) * modify_ansatzfunction_v(v[:,:,k], DF[:,:,:,k], Phi)
end


#Mat_global = sparse(ind_test, ind, vec(a), dof.n_true_dof, dof.n_true_dof)

