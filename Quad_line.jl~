function Q = quadrature(number,lineNumber)


switch lineNumber
	case 1,
		lineweights = 2;
		linepoints = [0.5 0; 0.5 0.5; 0 0.5]';
	case 2,
		t = 0.5*(sqrt(1/3)+1);	% 0.788675134
		r = 1-t;				% 0.211324865
		lineweights = [1, 1];
		linepoints = [r 0; t 0; t r; r t; 0 t; 0 r]';
	case 3,
		t = 0.5*(sqrt(1/3)+1);	% 0.788675134
		r = 1-t;				% 0.211324865
		lineweights = [1, 1];
		linepoints = [r 0; t 0; t r; r t; 0 t; 0 r]';
	case 4,
		t = 0.5*(sqrt(1/3)+1);	% 0.788675134
		r = 1-t;				% 0.211324865
		lineweights = [1, 1];
		linepoints = [r 0; t 0; t r; r t; 0 t; 0 r]';
	case 5,
		t = 0.5*(sqrt(3/5)+1); 	% 0.887298334 
		r = 1-t;				% 0.112701665
		lineweights = [5/9,8/9,5/9];
		linepoints = [r 0; 0.5 0; t 0; t r; 0.5 0.5; r t; 0 t; 0 0.5; 0 r]';
	case 6,
		t = 0.5*(sqrt(3/5)+1); 	% 0.887298334 
		r = 1-t;				% 0.112701665
		lineweights = [5/9,8/9,5/9];
		linepoints = [r 0; 0.5 0; t 0; t r; 0.5 0.5; r t; 0 t; 0 0.5; 0 r]';
	otherwise
		error('There is no such quadrature rule implemented!');
end

Q = struct('size', length(weights), 'points', points,'weights', weights, ...
		'order', order, 'lineweights',lineweights, 'linepoints',linepoints);

end
